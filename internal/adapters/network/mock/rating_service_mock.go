// Code generated by MockGen. DO NOT EDIT.
// Source: rating_service_port.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRatingService is a mock of RatingService interface.
type MockRatingService struct {
	ctrl     *gomock.Controller
	recorder *MockRatingServiceMockRecorder
}

// MockRatingServiceMockRecorder is the mock recorder for MockRatingService.
type MockRatingServiceMockRecorder struct {
	mock *MockRatingService
}

// NewMockRatingService creates a new mock instance.
func NewMockRatingService(ctrl *gomock.Controller) *MockRatingService {
	mock := &MockRatingService{ctrl: ctrl}
	mock.recorder = &MockRatingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRatingService) EXPECT() *MockRatingServiceMockRecorder {
	return m.recorder
}

// GetRatingByMovieId mocks base method.
func (m *MockRatingService) GetRatingByMovieId(ctx context.Context, movieId string) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingByMovieId", ctx, movieId)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatingByMovieId indicates an expected call of GetRatingByMovieId.
func (mr *MockRatingServiceMockRecorder) GetRatingByMovieId(ctx, movieId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingByMovieId", reflect.TypeOf((*MockRatingService)(nil).GetRatingByMovieId), ctx, movieId)
}
